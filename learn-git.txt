目录
一、在Windows上安装Git：	1
二、创建版本库：	1
三、修改文件和撤销修改	3
四、版本库回退	5
五、工作区和暂存区	5
六、连接远程库	6



一、在Windows上安装Git：
    
    在Windows上使用Git，可以从Git官网直接下载，然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！
    
    安装完成后，还需要最后一步设置，在命令行输入：
    $ git config —global user.name "Your Name"
    $ git config —global user.email "paul.hc@outlook.com”
    注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。


二、创建版本库：
    什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
    所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
    $ mkdir learngit
    $ cd learngit
    $ pwd
    /Users/michael/learngit

    第二步，通过git init命令把这个目录变成Git可以管理的仓库：
    $ git init
    Initialized empty Git repository in /Users/michael/learngit/.git/
    瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。
    注意：千万不要使用Windows自带的记事本编辑任何文本文件。
        言归正传，现在我们编写一个readme.txt文件，内容如下：
    Git is a version control system.
    Git is free software.

    一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。
    和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。
    第一步，用命令git add告诉Git，把文件添加到仓库：
    $ git add readme.txt
    第二步，用命令git commit告诉Git，把文件提交到仓库：
    $ git commit -m "wrote a readme file"  //只会提交临时库的文件，而工作区的修改不会提交给版本库。
    [master (root-commit) eaadf4e] wrote a readme file 
    1 file changed, 2 insertions(+) 
    create mode 100644 readme.txt

    简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

    为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
    $ git add file1.txt
    $ git add file2.txt file3.txt
    $ git commit -m "add 3 files."      

三、修改文件和撤销修改
    我们已经成功地添加并提交了一个readme.txt文件，现在，是时候继续工作了，于是，我们继续修改readme.txt文件，改成如下内容：
    Git is a distributed version control system.
    Git is free software.

    现在，运行git status命令看看结果：
    $ git status         //只查看当前工作区和临时库的状况。版本库信息不会显视。  
    On branch master
    Changes not staged for commit:     //修改没有stage（临时库），故不会去仓库。
    (use "git add <file>..." to update what will be committed)
    (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   readme.txt

    no changes added to commit (use "git add" and/or "git commit -a")

    git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
    虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看：
    $ git diff readme.txt   //添加到临时库就不能查看修改内容了。          
    diff --git a/readme.txt b/readme.txt
    index 46d49bf..9247db6 100644--- a/readme.txt
    +++ b/readme.txt
    @@ -1,2 +1,2 @@-Git is a version control system.
    +Git is a distributed version control system.  //+显示添加的内容。
    Git is free software.

    git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个distributed单词。
    知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是git add：
    $ git add readme.txt

    同样没有任何输出。在执行第二步git commit之前，我们再运行git status看看当前仓库的状态：
    $ git status
    On branch master
    Changes to be committed:   //这句里面没有stage，说明修改的文件已经在stage了，等待上传到文件库里。
    (use "git reset HEAD <file>..." to unstage)	
    modified:   readme.txt

    git status告诉我们，将要被提交的修改包括readme.txt，下一步，就可以放心地提交了：
    $ git commit -m "add distributed"
    [master e475afc] add distributed
    1 file changed, 1 insertion(+), 1 deletion(-)

    提交后，我们再用git status命令看看仓库的当前状态：
    $ git status
    On branch master
    nothing to commit, working tree clean

    Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。

四、版本库回退
	
    当然了，在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：
    $ git log   //可以显示版本库中的修改，并显示commit -m中的内容。
    $ git log —pretty=oneline   //如果嫌输出信息太多，可以单行显示。
    首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（每个人的不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
    现在，我们要把当前版本append GPL回退到上一个版本add distributed，就可以使用git reset命令：
    $ git reset —hard HEAD^     //这条命令可以载入任何时间点的版本库。
    HEAD is now at e475afc add distributed
    $ git reflog   //如果使用git reset —hard回退版本库，那么用git log就查不到之后的修改记录了，想跳到最新的修改就不行了，这时用git reflog可以查看所有添加版本库的记录。
    $ git reset —hard xxxxx（记录里的修改版本编号）//这样就可以进入任何版本了。

五、工作区和暂存区
 
    master是系统自动为我们创建的第一个分支。

    $ git checkout — readme.txt      //这条命令可以退回工作区的修改。用版本库的替换工作区的。注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！
    $ git reset HEAD readme.txt       //这个可以撤销临时区的修改。HEAD表示最新的。


六、连接远程库
      码云上创建一个新库后，在本地bash中输入以下内容就可以建立连接：
    $ git remote add origin https://gitee.com/he-chuan/learn-git.git
	注意：origin是系统默认取得名字，我们可以自己取。
        
    把本地库上传到码云输入：
        注意：$ git push -u origin master    //第一次要加-u和默认远程服务器名字origin，
        $ git push origin master     //这条命令是说把本地master传到origin，以后上传就可以用这种简洁的方式。
        如果想同时连接github和gitee的操作如下：
	    git remote -v    //查看当前已经连接的远程库。
        由于第一个连接的远程库，系统默认取了origin的名字，所以我们先删除这个远程连接，之后重新建立连接自己取名字。
        git remote rm origin   //删除一个远程库连接。
        $ git remote add <name> <网址>  //name自己取，github或者gitee

七、创建与合并分支
    Git鼓励大量使用分支：
    查看分支：git branch
    创建分支：git branch <name>
    切换分支：git checkout <name>或者git switch <name>
    创建+切换分支：git checkout -b <name>或者git switch -c <name>
    合并某分支到当前分支：git merge <name>
    删除分支：git branch -d <name>





